// Generated by CoffeeScript 1.6.3
(function() {
  var root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.Chart = (function() {
    function Chart(options) {
      var view_class;
      if (options == null) {
        options = {};
      }
      this.refresh = __bind(this.refresh, this);
      this.gqueries = __bind(this.gqueries, this);
      if (options instanceof Element) {
        this.container = $(options);
        this._gqueries = this.container.data('etm-chart-series').replace(/[\n\s]/, '').split(',');
        this.type = this.container.data('etm-chart-type');
      } else {
        this._gqueries = options.series;
        this.type = options.type;
        this.container = options.container;
      }
      this._gqueries = this._gqueries || [];
      view_class = (function() {
        switch (this.type) {
          case 'stacked_bar':
            return StackedBarChart;
          case 'bezier':
            return BezierChart;
          case 'table':
            return Table;
        }
      }).call(this);
      if (!view_class) {
        throw "Unsupported chart type";
      }
      this.view = new view_class(this.container[0], this._gqueries);
    }

    Chart.prototype.gqueries = function() {
      return this._gqueries;
    };

    Chart.prototype.refresh = function(results) {
      return this.view.refresh(results);
    };

    return Chart;

  })();

  root.BaseChart = (function() {
    function BaseChart(container, gqueries) {
      this.draw_legend = __bind(this.draw_legend, this);
      this.tallest_column_value = __bind(this.tallest_column_value, this);
      this.container = container;
      this.gqueries = gqueries;
      this.colors = d3.scale.category20();
    }

    BaseChart.prototype.flatten = function(arr) {
      return $.map(arr, function(x) {
        return x;
      });
    };

    BaseChart.prototype.humanize_string = function(s) {
      return s.replace(/_/g, ' ');
    };

    BaseChart.prototype.humanize_value = function(x) {
      var pow;
      if (x == null) {
        return '-';
      }
      pow = Math.log(x / Math.log(10));
      if (pow > 9) {
        return "" + ((x / Math.pow(10, 9)).toFixed(2)) + "B";
      }
      if (pow > 6) {
        return "" + ((x / Math.pow(10, 6)).toFixed(2)) + "M";
      }
      if (pow > 3) {
        return "" + ((x / Math.pow(10, 3)).toFixed(2)) + "K";
      }
      return x.toFixed(2);
    };

    BaseChart.prototype.tallest_column_value = function(data) {
      var future, g, present, _i, _len, _ref;
      present = future = 0;
      _ref = this.gqueries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        g = _ref[_i];
        present += data.results[g].present;
        future += data.results[g].future;
      }
      return Math.max(present, future);
    };

    BaseChart.prototype.draw_legend = function(svg, opts) {
      var legend, offset, series,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      if (svg == null) {
        svg = this.svg;
      }
      series = opts.series || this.gqueries;
      offset = opts.offset || 0;
      legend = svg.append('svg:g').attr("transform", "translate(10," + offset + ")").selectAll("svg.legend").data(series).enter().append("svg:g").attr("class", "legend").attr("transform", function(d, i) {
        return "translate(0, " + (i * 20) + ")";
      }).attr("height", 30).attr("width", 90);
      legend.append("svg:rect").attr("width", 10).attr("height", 10).attr("fill", function(d) {
        return _this.colors(d);
      });
      return legend.append("svg:text").attr("x", 15).attr("y", 10).text(function(d) {
        return _this.humanize_string(d);
      });
    };

    return BaseChart;

  })();

}).call(this);
